apiVersion: camel.apache.org/v1
kind: Integration
metadata:
  name: iot-mqtt2kafka-integration
spec:
  configuration:
    - type: configmap
      value: iot-mqtt2kafka-config
  profile: OpenShift
  sources:
    - content: "package com.redhat.manuela.routes;\n\nimport org.apache.camel.builder.RouteBuilder;\nimport org.apache.camel.component.kafka.KafkaConstants;\nimport org.apache.camel.model.OnCompletionDefinition;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\npublic class MQTT2KafkaRoute extends RouteBuilder {\n\t\n\tprivate static final Logger LOGGER = LoggerFactory.getLogger(MQTT2KafkaRoute.class);\n\t\n\t@Override\n\tpublic void configure() throws Exception {\n\t\tstoreTemperatureInKafka();\n\t\tstoreVibrationInKafka();\n\t\t// readTemperatureFromKafka();\n\t\t// readVibrationFromKafka();\n\t}\n\n\tprivate void storeTemperatureInKafka() {\n\t\tfrom(\"paho:{{mqtt.broker.topic.temperature}}?brokerUrl={{mqtt.broker.uri}}&clientId={{mqtt.broker.clientId}}-temp\")\n\t\t\t.log(\"Reading message form MQTT: ${body}\")\n\t\t\t// .setHeader(KafkaConstants.KEY, constant(\"sensor-temp\"))\n\t\t\t.to(\"kafka:{{kafka.broker.topic.temperature}}?brokers={{kafka.broker.uri}}\")\n\t\t\t.log(\"sent message: ${headers[org.apache.kafka.clients.producer.RecordMetadata]}\");\n\t}\n\n\tprivate void storeVibrationInKafka() {\n\t\tfrom(\"paho:{{mqtt.broker.topic.vibration}}?brokerUrl={{mqtt.broker.uri}}&clientId={{mqtt.broker.clientId}}-vibr\")\n\t\t\t.log(\"Reading message form MQTT: ${body}\")\n\t\t\t// .setHeader(KafkaConstants.KEY, constant(\"sensor-temp\"))\n\t\t\t.to(\"kafka:{{kafka.broker.topic.vibration}}?brokers={{kafka.broker.uri}}\")\n\t\t\t.log(\"sent message: ${headers[org.apache.kafka.clients.producer.RecordMetadata]}\");\n\t}\n\n\tprivate void readTemperatureFromKafka() {\n\t\tfrom(\"kafka:{{kafka.broker.topic.temperature}}?brokers={{kafka.broker.uri}}\")\n\t\t\t.log(\"Reading message from Kafka: ${body}\")\n\t\t\t.log(\"    on the topic ${headers[kafka.TOPIC]}\")\n    \t\t.log(\"    on the partition ${headers[kafka.PARTITION]}\")\n    \t\t.log(\"    with the offset ${headers[kafka.OFFSET]}\")\n\t\t    .log(\"    with the key ${headers[kafka.KEY]}\");\n\t}\n\n\tprivate void readVibrationFromKafka() {\n\t\tfrom(\"kafka:{{kafka.broker.topic.vibration}}?brokers={{kafka.broker.uri}}\")\n\t\t\t.log(\"Reading message from Kafka: ${body}\")\n\t\t\t.log(\"    on the topic ${headers[kafka.TOPIC]}\")\n    \t\t.log(\"    on the partition ${headers[kafka.PARTITION]}\")\n    \t\t.log(\"    with the offset ${headers[kafka.OFFSET]}\")\n\t\t    .log(\"    with the key ${headers[kafka.KEY]}\");\n\t}\n\n\t@Override\n\tpublic OnCompletionDefinition onCompletion() {\n\t\treturn super.onCompletion();\n\t}\n}\n"
      name: MQTT2KafkaRoute.java